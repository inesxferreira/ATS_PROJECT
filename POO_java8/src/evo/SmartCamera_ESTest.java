/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:27:25 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartCamera_ESTest extends SmartCamera_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      smartCamera1.setSize(508.6355050701833);
      boolean boolean0 = smartCamera1.equals(smartCamera0);
      assertEquals(508.6355050701833, smartCamera1.getSize(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setResolution(0.0);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setSize(0.0);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("q246eWub]y6U", false, 0.3, 111.95417695);
      double double0 = smartCamera0.getSize();
      assertEquals(33.676253085, smartCamera0.consumoEnergia(), 0.01);
      assertEquals(111.95417695, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("<", false, 1.0, 1.0);
      double double0 = smartCamera0.getResolution();
      assertEquals(0.6, smartCamera0.consumoEnergia(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("", true, 1.0, 1.0);
      SmartCamera smartCamera1 = smartCamera0.clone();
      assertEquals(0.6, smartCamera1.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("<", false, 1.0, 1.0);
      SmartCamera smartCamera1 = smartCamera0.clone();
      smartCamera0.setResolution(3014.4586337781);
      boolean boolean0 = smartCamera1.equals(smartCamera0);
      assertEquals(904.6375901334301, smartCamera0.consumoEnergia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartCamera smartCamera0 = null;
      try {
        smartCamera0 = new SmartCamera((SmartCamera) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("<", false, 1.0, 1.0);
      double double0 = smartCamera0.consumoEnergia();
      assertEquals(0.6, double0, 0.01);
      assertEquals(1.0, smartCamera0.getSize(), 0.01);
      assertEquals(1.0, smartCamera0.getResolution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = smartCamera0.consumoEnergia();
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = smartCamera0.getSize();
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      double double0 = smartCamera0.getResolution();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("uA.}OVvw->dM", true, 0.0, 0.0);
      SmartCamera smartCamera1 = new SmartCamera("uA.}OVvw->dM", true, 0.0, 698.0081341354659);
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertEquals(0.0, smartCamera1.getResolution(), 0.01);
      assertEquals(698.0081341354659, smartCamera1.getSize(), 0.01);
      assertFalse(smartCamera1.equals((Object)smartCamera0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      SmartCamera smartCamera1 = smartCamera0.clone();
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertTrue(boolean0);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      smartCamera1.setID("g");
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertFalse(smartCamera1.equals((Object)smartCamera0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("uA.}OVvw->dM", true, 0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = smartCamera0.equals(object0);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      boolean boolean0 = smartCamera0.equals((Object) null);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      boolean boolean0 = smartCamera0.equals(smartCamera0);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      smartCamera1.setResolution(2049.3107533594743);
      boolean boolean0 = smartCamera1.equals(smartCamera0);
      assertEquals(2049.3107533594743, smartCamera1.getResolution(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("uA.}OVvw->dM", true, 0.0, 0.0);
      String string0 = smartCamera0.toString();
      assertEquals("\n SmarCamera (\u001B[36muA.}OVvw->dM\u001B[0m,ON): Resolu\u00E7\u00E3o-> 0.0  Tamanho-> 0.0  Consumo Di\u00E1rio-> 0.0", string0);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("'nsulDmo i]\u00E1rio-> ", false, 359.49862, 359.49862);
      String string0 = smartCamera0.toString();
      assertEquals(359.49862, smartCamera0.getResolution(), 0.01);
      assertEquals("\n SmarCamera (\u001B[36m'nsulDmo i]\u00E1rio-> \u001B[0m,OF): Resolu\u00E7\u00E3o-> 359.49862  Tamanho-> 359.49862  Consumo Di\u00E1rio-> 215.699172", string0);
      assertEquals(359.49862, smartCamera0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      smartCamera0.setResolution(2049.3107533594743);
      double double0 = smartCamera0.consumoEnergia();
      assertEquals(2049.3107533594743, smartCamera0.getResolution(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera("HhURu$/=", false, 1.0, 0.0);
      smartCamera0.setResolution((-1.0));
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
      assertEquals(1.0, smartCamera0.getResolution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera((String) null, false, (-87.00542377980776), (-87.00542377980776));
      smartCamera0.setSize((-87.00542377980776));
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.hashCode();
      assertEquals(0.0, smartCamera0.getSize(), 0.01);
      assertEquals(0.0, smartCamera0.getResolution(), 0.01);
  }
}
