/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:31:09 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Faturas_ESTest extends Faturas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Faturas faturas0 = new Faturas(2247.9181268165, "", "tJkR7.8B%", 2247.9181268165);
      double double0 = faturas0.getFatura();
      assertEquals("", faturas0.getDataInicial());
      assertEquals(2247.9181268165, double0, 0.01);
      assertEquals(2247.9181268165, faturas0.getConsumo(), 0.01);
      assertEquals("tJkR7.8B%", faturas0.getDataFinal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Faturas faturas0 = new Faturas((-1310.762423), "", (String) null, 0.0);
      double double0 = faturas0.getFatura();
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
      assertEquals((-1310.762423), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "T", "T", 0.0);
      faturas0.getDataInicial();
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Faturas faturas0 = new Faturas(2247.9181268165, "", "tJkR7.8B%", 2247.9181268165);
      String string0 = faturas0.getDataInicial();
      assertEquals("tJkR7.8B%", faturas0.getDataFinal());
      assertEquals(2247.9181268165, faturas0.getFatura(), 0.01);
      assertEquals(2247.9181268165, faturas0.getConsumo(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Faturas faturas0 = new Faturas(2247.9181268165, "", "tJkR7.8B%", 2247.9181268165);
      String string0 = faturas0.getDataFinal();
      assertEquals(2247.9181268165, faturas0.getFatura(), 0.01);
      assertEquals(2247.9181268165, faturas0.getConsumo(), 0.01);
      assertEquals("", faturas0.getDataInicial());
      assertEquals("tJkR7.8B%", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "", "", 0.0);
      faturas0.getDataFinal();
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Faturas faturas0 = new Faturas(2247.9181268165, "", "tJkR7.8B%", 2247.9181268165);
      double double0 = faturas0.getConsumo();
      assertEquals(2247.9181268165, double0, 0.01);
      assertEquals("", faturas0.getDataInicial());
      assertEquals(2247.9181268165, faturas0.getFatura(), 0.01);
      assertEquals("tJkR7.8B%", faturas0.getDataFinal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, (String) null, (String) null, (-3030.467864));
      double double0 = faturas0.getConsumo();
      assertEquals((-3030.467864), double0, 0.01);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Faturas faturas0 = new Faturas((-1266.62553), "cB7", "cB7", (-1266.62553));
      Faturas faturas1 = faturas0.clone();
      assertEquals((-1266.62553), faturas1.getConsumo(), 0.01);
      assertEquals((-1266.62553), faturas1.getFatura(), 0.01);
      assertTrue(faturas1.equals((Object)faturas0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Faturas faturas0 = new Faturas(2247.9181268165, "", "tJkR7.8B%", 2247.9181268165);
      Faturas faturas1 = faturas0.clone();
      assertEquals("tJkR7.8B%", faturas1.getDataFinal());
      assertEquals(2247.9181268165, faturas0.getConsumo(), 0.01);
      assertTrue(faturas1.equals((Object)faturas0));
      assertEquals("", faturas1.getDataInicial());
      assertEquals(2247.9181268165, faturas0.getFatura(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, (String) null, (String) null, (-3030.467864));
      Faturas faturas1 = faturas0.clone();
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertEquals((-3030.467864), faturas0.getConsumo(), 0.01);
      assertEquals((-3030.467864), faturas1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Faturas faturas0 = null;
      try {
        faturas0 = new Faturas((Faturas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Faturas", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, (String) null, (String) null, (-3030.467864));
      faturas0.getDataInicial();
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertEquals((-3030.467864), faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, (String) null, (String) null, (-3030.467864));
      faturas0.getDataFinal();
      assertEquals((-3030.467864), faturas0.getConsumo(), 0.01);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "T", "T", 0.0);
      double double0 = faturas0.getFatura();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "\u001B[1m Data inicial: \u001B[0m", "", 0.0);
      double double0 = faturas0.getConsumo();
      assertEquals("", faturas0.getDataFinal());
      assertEquals(0.0, double0, 0.01);
      assertEquals("\u001B[1m Data inicial: \u001B[0m", faturas0.getDataInicial());
      assertEquals(0.0, faturas0.getFatura(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "\u001B[1m Data inicial: \u001B[0m", "", 0.0);
      Faturas faturas1 = new Faturas();
      boolean boolean0 = faturas0.equals(faturas1);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertEquals(0.0, faturas1.getConsumo(), 0.01);
      assertEquals(0.0, faturas1.getFatura(), 0.01);
      assertEquals("", faturas0.getDataFinal());
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Faturas faturas0 = new Faturas();
      Faturas faturas1 = new Faturas(0.0, "$8j ", "$8j ", 0.0);
      boolean boolean0 = faturas0.equals(faturas1);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertEquals(0.0, faturas1.getConsumo(), 0.01);
      assertEquals(0.0, faturas1.getFatura(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "T", "T", 0.0);
      Faturas faturas1 = new Faturas(0.0, (String) null, "UL(5o-", (-1.0));
      boolean boolean0 = faturas0.equals(faturas1);
      assertEquals(0.0, faturas1.getFatura(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), faturas1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Faturas faturas0 = new Faturas((-1257.983831510168), "", "", (-1257.983831510168));
      Faturas faturas1 = new Faturas();
      boolean boolean0 = faturas1.equals(faturas0);
      assertEquals((-1257.983831510168), faturas0.getFatura(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, faturas1.getConsumo(), 0.01);
      assertEquals((-1257.983831510168), faturas0.getConsumo(), 0.01);
      assertEquals(0.0, faturas1.getFatura(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "\u001B[1m Data inicial: \u001B[0m", "", 0.0);
      boolean boolean0 = faturas0.equals("");
      assertFalse(boolean0);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertEquals("\u001B[1m Data inicial: \u001B[0m", faturas0.getDataInicial());
      assertEquals("", faturas0.getDataFinal());
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "\u001B[1m Data inicial: \u001B[0m", "", 0.0);
      Faturas faturas1 = new Faturas(faturas0);
      boolean boolean0 = faturas0.equals(faturas1);
      assertEquals(0.0, faturas1.getFatura(), 0.01);
      assertEquals("\u001B[1m Data inicial: \u001B[0m", faturas1.getDataInicial());
      assertTrue(boolean0);
      assertEquals(0.0, faturas1.getConsumo(), 0.01);
      assertEquals("", faturas1.getDataFinal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Faturas faturas0 = new Faturas(0.0, "\u001B[1m Data inicial: \u001B[0m", "", 0.0);
      boolean boolean0 = faturas0.equals(faturas0);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertTrue(boolean0);
      assertEquals("\u001B[1m Data inicial: \u001B[0m", faturas0.getDataInicial());
      assertEquals("", faturas0.getDataFinal());
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Faturas faturas0 = new Faturas();
      boolean boolean0 = faturas0.equals((Object) null);
      assertEquals(0.0, faturas0.getFatura(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, faturas0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Faturas faturas0 = new Faturas();
      String string0 = faturas0.toString();
      assertEquals("\n\u001B[36m   FATURA { \u001B[0m \n\n\u001B[1m Data inicial: \u001B[0m\n\u001B[1m Data Final: \u001B[0m\n\n\u001B[1m Consumo: \u001B[0m0.0\n\n\u001B[1m Custo: \u001B[0m0.0\n\n\n\u001B[36m } \u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Faturas faturas0 = new Faturas();
      Faturas faturas1 = faturas0.clone();
      assertEquals(0.0, faturas1.getFatura(), 0.01);
      assertEquals(0.0, faturas1.getConsumo(), 0.01);
      assertTrue(faturas1.equals((Object)faturas0));
  }
}
