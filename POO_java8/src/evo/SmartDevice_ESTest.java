/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:32:12 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartDevice_ESTest extends SmartDevice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      String string0 = smartCamera0.toString();
      assertEquals("\n SmarCamera (\u001B[36m\u001B[0m,OF): Resolu\u00E7\u00E3o-> 0.0  Tamanho-> 0.0  Consumo Di\u00E1rio-> 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      boolean boolean0 = smartSpeaker0.getOn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb();
      smartBulb0.setID((String) null);
      String string0 = smartBulb0.getID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      String string0 = smartSpeaker0.getID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb(",$", true, 0, 0.0);
      double double0 = smartBulb0.consumoEnergia();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      smartCamera0.setSize(894.80307627);
      smartCamera0.setResolution(1);
      double double0 = smartCamera0.consumoEnergia();
      assertEquals(268.740922881, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("0+ZJw&N`@nM)F", true, (-2677), "0+ZJw&N`@nM)F", "0+ZJw&N`@nM)F");
      smartSpeaker0.setVolume((-2677));
      double double0 = smartSpeaker0.consumoEnergia();
      assertEquals((-2661.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb();
      smartBulb0.setOn(true);
      smartBulb0.clone();
      assertTrue(smartBulb0.getOn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb("", false, (-1736), (-1736));
      SmartDevice smartDevice0 = smartBulb0.clone();
      assertEquals("", smartDevice0.getID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("1VI.<K,", false, 428, "{", (String) null);
      // Undeclared exception!
      try { 
        smartSpeaker0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setChannel((String) null);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker();
      // Undeclared exception!
      try { 
        smartSpeaker0.equals(smartSpeaker1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartBulb smartBulb0 = new SmartBulb(".3~X*R>=", true, 0, 0);
      boolean boolean0 = smartBulb0.getOn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("0+ZJw&N`@nM)F", true, (-2677), "0+ZJw&N`@nM)F", "0+ZJw&N`@nM)F");
      String string0 = smartSpeaker0.getID();
      assertEquals("0+ZJw&N`@nM)F", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      SmartSpeaker smartSpeaker1 = new SmartSpeaker("\n SmarSpeaker (\u001B[36m\u001B[0m,OF): Marca->   Channel->   Volume-> 0  Consumo Di\u00E1rio-> 0.0", false, 100, "\n SmarSpeaker (\u001B[36m\u001B[0m,OF): Marca->   Channel->   Volume-> 0  Consumo Di\u00E1rio-> 0.0", (String) null);
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      SmartSpeaker smartSpeaker1 = new SmartSpeaker();
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n SmarSpeaker (\u001B[36m\u001B[0m,OF): Marca->   Channel->   Volume-> 0  Consumo Di\u00E1rio-> 0.0", false, 100, "\n SmarSpeaker (\u001B[36m\u001B[0m,OF): Marca->   Channel->   Volume-> 0  Consumo Di\u00E1rio-> 0.0", (String) null);
      // Undeclared exception!
      try { 
        smartSpeaker0.consumoEnergia();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartCamera smartCamera0 = new SmartCamera();
      SmartCamera smartCamera1 = new SmartCamera(smartCamera0);
      smartCamera1.setOn(true);
      boolean boolean0 = smartCamera0.equals(smartCamera1);
      assertTrue(smartCamera1.getOn());
      assertFalse(boolean0);
  }
}
