/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:25:53 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fornecedores_ESTest extends Fornecedores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP("cR8E*/?");
      fornecEDP0.aumentaVolumeFaturacao(0);
      assertEquals(0.0, fornecEDP0.getVolumeFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((String) null);
      fornecEndesa0.setVolumeFaturacao(1.0);
      double double0 = fornecEndesa0.getVolumeFaturacao();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((-1.0));
      double double0 = fornecEndesa0.getVolumeFaturacao();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((String) null);
      String string0 = fornecEndesa0.getFormula();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      String string0 = fornecEndesa0.getFormula();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      fornecEDP0.setDataInicial("");
      String string0 = fornecEDP0.getDataInicial();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      fornecEDP0.clone();
      assertEquals(0.0, fornecEDP0.getVolumeFaturacao(), 0.01);
      assertEquals(0.148, fornecEDP0.getValorBase(), 0.01);
      assertEquals(0.6, fornecEDP0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar(1257.5309);
      fornecJomar0.clone();
      assertEquals(0.6, fornecJomar0.getImposto(), 0.01);
      assertEquals(0.148, fornecJomar0.getValorBase(), 0.01);
      assertEquals(1257.5309, fornecJomar0.getVolumeFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-2620.41416933444));
      fornecEDP0.clone();
      assertEquals((-2620.41416933444), fornecEDP0.getVolumeFaturacao(), 0.01);
      assertEquals(0.6, fornecEDP0.getImposto(), 0.01);
      assertEquals(0.148, fornecEDP0.getValorBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP("");
      double double0 = fornecEDP0.getVolumeFaturacao();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      String string0 = fornecEDP0.getDataInicial();
      assertEquals("01/01/2018", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP("");
      double double0 = fornecEDP0.getValorBase();
      assertEquals(0.148, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa(",A`q");
      String string0 = fornecEndesa0.getFormula();
      assertEquals(",A`q", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-2620.41416933444));
      double double0 = fornecEDP0.getImposto();
      assertEquals(0.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Fornecedores.Stringfornecedor((Fornecedores) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((-2086.3706296147093));
      String string0 = Fornecedores.Stringfornecedor(fornecEndesa0);
      assertEquals("Endesa", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar("O-A#e9$6s4bsS");
      String string0 = Fornecedores.Stringfornecedor(fornecJomar0);
      assertEquals("Jomar", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      String string0 = Fornecedores.Stringfornecedor(fornecEDP0);
      assertEquals("EDP", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      fornecEDP0.aumentaVolumeFaturacao(0.6922335913644884);
      assertEquals(0.6922335913644884, fornecEDP0.getVolumeFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar();
      fornecJomar0.aumentaVolumeFaturacao((-1906.4136407305266));
      assertEquals(0.0, fornecJomar0.getVolumeFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((-2086.3706296147093));
      FornecEndesa fornecEndesa1 = new FornecEndesa(fornecEndesa0);
      boolean boolean0 = fornecEndesa1.equals(fornecEndesa0);
      assertEquals(0.148, fornecEndesa0.getValorBase(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.6, fornecEndesa0.getImposto(), 0.01);
      assertEquals((-2086.3706296147093), fornecEndesa0.getVolumeFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      boolean boolean0 = fornecEDP0.equals("\nValor Base= 0.148\nImposto= 0.6\nFatura\u00E7\u00E3o=0.0\nF\u00F3rmula= ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      boolean boolean0 = fornecEndesa0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      fornecEndesa0.setDataInicial((String) null);
      assertEquals(0.6, fornecEndesa0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      fornecEDP0.setVolumeFaturacao((-1011.161261));
      assertEquals(0.0, fornecEDP0.getVolumeFaturacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      fornecEndesa0.setFormula("formula1");
      assertEquals("formula1", fornecEndesa0.getFormula());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      fornecEDP0.setFormula("formula2");
      assertEquals("formula2", fornecEDP0.getFormula());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((String) null);
      fornecEndesa0.setFormula((String) null);
      assertEquals(0.148, fornecEndesa0.getValorBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((-2086.3706296147093));
      boolean boolean0 = fornecEndesa0.equals(fornecEndesa0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      String string0 = fornecEndesa0.toString();
      assertEquals("\nValor Base= 0.148\nImposto= 0.6\nFatura\u00E7\u00E3o=0.0\nF\u00F3rmula= ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      Fornecedores fornecedores0 = fornecEDP0.clone();
      Fornecedores.fornecedoresComparator fornecedores_fornecedoresComparator0 = new Fornecedores.fornecedoresComparator();
      int int0 = fornecedores_fornecedoresComparator0.compare((Fornecedores) fornecEDP0, fornecedores0);
      assertEquals(0, int0);
      assertEquals(0.6, fornecEDP0.getImposto(), 0.01);
      assertEquals(0.148, fornecEDP0.getValorBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar("O-A#e9$6s4bsS");
      fornecJomar0.setFormula("formula3");
      assertEquals("formula3", fornecJomar0.getFormula());
  }
}
