/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:05:24 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Casa_ESTest extends Casa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Casa.onlyDigits("Tamanho-> ", (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Casa casa0 = new Casa();
      LinkedList<Faturas> linkedList0 = new LinkedList<Faturas>();
      Faturas faturas0 = new Faturas(0.0, "F6XQsb5} ~s(UR~$0~", (String) null, 0.0);
      linkedList0.add(faturas0);
      linkedList0.add(faturas0);
      casa0.setFatura(linkedList0);
      Casa.ComparatorGasto casa_ComparatorGasto0 = new Casa.ComparatorGasto();
      int int0 = casa_ComparatorGasto0.compare(casa0, casa0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Casa casa0 = new Casa();
      Casa casa1 = casa0.clone();
      Casa.ComparatorGasto casa_ComparatorGasto0 = new Casa.ComparatorGasto();
      // Undeclared exception!
      try { 
        casa_ComparatorGasto0.compare(casa1, casa0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Casa casa0 = new Casa();
      LinkedList<Faturas> linkedList0 = new LinkedList<Faturas>();
      Faturas faturas0 = new Faturas(0.0, "F6XQsb5} ~s(UR~$0~", (String) null, 0.0);
      linkedList0.add(faturas0);
      linkedList0.add(faturas0);
      casa0.setFatura(linkedList0);
      Casa.ComparatorConsumo casa_ComparatorConsumo0 = new Casa.ComparatorConsumo();
      casa_ComparatorConsumo0.compare(casa0, casa0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa(",MV", ";M*3", fornecEndesa0);
      Casa casa1 = casa0.clone();
      Casa.ComparatorConsumo casa_ComparatorConsumo0 = new Casa.ComparatorConsumo();
      // Undeclared exception!
      try { 
        casa_ComparatorConsumo0.compare(casa0, casa1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("Consumo Di\u00E1rio-> ");
      SmartBulb smartBulb0 = new SmartBulb("BJ", true, 3, 3);
      casa0.addSmartDevice(smartBulb0);
      casa0.addToRoom("Consumo Di\u00E1rio-> ", "BJ");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("\n\n");
      boolean boolean0 = casa0.roomHasDevice("\n\n", "formula2");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Casa casa0 = new Casa();
      boolean boolean0 = casa0.equals(casa0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setCustoInstalacao(0.0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addRoom("\n\n");
      casa0.addSmartDevice(smartCamera0);
      casa0.addToRoom("\n\n", "\n\n");
      boolean boolean0 = casa0.roomisEmpty("\n\n");
      assertFalse(boolean0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addRoom("\n\n");
      casa0.addSmartDevice(smartCamera0);
      casa0.addToRoom("\n\n", "\n\n");
      boolean boolean0 = casa0.roomHasDevice("\n\n", "\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("");
      boolean boolean0 = casa0.hasRoom("");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("uwqe|", true, 100, "-W3(B", "-W3(B");
      hashMap0.put((String) null, smartSpeaker0);
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecJomar fornecJomar0 = new FornecJomar((String) null);
      Casa casa0 = new Casa(hashMap0, hashMap1, (String) null, "", fornecJomar0);
      boolean boolean0 = casa0.hasDevice("uwqe|");
      assertTrue(boolean0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar("\u001B[1mProprietario: \u001B[0m");
      Casa casa0 = new Casa((String) null, (String) null, fornecJomar0);
      casa0.getProprietario();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setProprietario("Resolu\u00E7\u00E3o-> ");
      casa0.getProprietario();
      assertEquals("Resolu\u00E7\u00E3o-> ", casa0.getProprietario());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar((-545.1978631));
      Casa casa0 = new Casa("Ft", "zWXc_X61ynf12k", fornecJomar0);
      String string0 = casa0.getNIF();
      assertEquals("Ft", casa0.getProprietario());
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, SmartCamera> hashMap0 = new HashMap<String, SmartCamera>();
      HashMap<String, SmartDevice> hashMap1 = new HashMap<String, SmartDevice>(hashMap0);
      HashMap<String, HashSet<String>> hashMap2 = new HashMap<String, HashSet<String>>();
      FornecJomar fornecJomar0 = new FornecJomar(0.0);
      Casa casa0 = new Casa(hashMap1, hashMap2, "}'\u0007LDOPbR) xmtgu,.", "}'\u0007LDOPbR) xmtgu,.", fornecJomar0);
      casa0.getNIF();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Casa casa0 = new Casa();
      FornecJomar fornecJomar0 = new FornecJomar();
      casa0.setFornecedor(fornecJomar0);
      casa0.getFornecedor();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Casa casa0 = new Casa();
      FornecEndesa fornecEndesa0 = new FornecEndesa((-1.0));
      fornecEndesa0.setVolumeFaturacao(0.3);
      casa0.setFornecedor(fornecEndesa0);
      casa0.getFornecedor();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      casa0.addRoom("");
      Map<String, HashSet<String>> map0 = casa0.getDivisoes();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      smartCamera0.setOn(true);
      casa0.addSmartDevice(smartCamera0);
      SmartDevice smartDevice0 = casa0.getDevice("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertNotNull(smartDevice0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setCustoInstalacao(3435.128);
      double double0 = casa0.getCustoInstalacao();
      assertEquals(3435.128, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartBulb smartBulb0 = new SmartBulb("z;OKac7", true, (-1978), 1.0);
      casa0.addSmartDevice(smartBulb0);
      double double0 = casa0.consumoTotal2();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals((-1976.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecEDP fornecEDP0 = new FornecEDP((-1.0));
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n\u001B[36m Casa { \u001B[0m \n\n", true, (-1451), "\n\u001B[36m Casa { \u001B[0m \n\n", "\n\u001B[36m Casa { \u001B[0m \n\n");
      hashMap0.put("\n\u001B[36m Casa { \u001B[0m \n\n", smartSpeaker0);
      Casa casa0 = new Casa(hashMap0, hashMap1, "\n\u001B[36m Casa { \u001B[0m \n\n", "\n\u001B[36m Casa { \u001B[0m \n\n", fornecEDP0);
      double double0 = casa0.consumoTotal("formula3");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(117.64224000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecEDP fornecEDP0 = new FornecEDP((-1.0));
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("m(*e u'W-", true, (-1451), "c*_+i)7lTr", "m(*e u'W-");
      smartSpeaker0.setVolume((-973));
      hashMap0.put("\n\u001B[36m Casa { \u001B[0m \n\n", smartSpeaker0);
      Casa casa0 = new Casa(hashMap0, hashMap1, "\n\u001B[36m Casa { \u001B[0m \n\n", "\n\u001B[36m Casa { \u001B[0m \n\n", fornecEDP0);
      double double0 = casa0.consumoTotal("formula3");
      assertEquals((-4920.5145600000005), double0, 0.01);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      Casa casa0 = new Casa((String) null, "", fornecEDP0);
      casa0.setCustoInstalacao(0.3);
      casa0.clone();
      assertEquals(0.3, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Casa casa0 = new Casa();
      LinkedList<Faturas> linkedList0 = new LinkedList<Faturas>();
      linkedList0.add((Faturas) null);
      // Undeclared exception!
      try { 
        casa0.setFatura(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP(3435.128);
      Casa casa0 = new Casa("formula1", "***** Dispositivo n\u00E3o existe *****", fornecEDP0);
      HashMap<String, HashSet<String>> hashMap0 = new HashMap<String, HashSet<String>>();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashMap0.put((String) null, hashSet0);
      casa0.setDivisoes(hashMap0);
      // Undeclared exception!
      try { 
        casa0.setDivisonOn("***** A casa n\u00E3o tem divis\u00F5es! *****");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      Casa casa0 = new Casa(hashMap0, (Map<String, HashSet<String>>) null, "\u001B[1m \u001B[36m_________________________________________________________\u001B[0m \n\n \u001B[1m                   CASA INFO \u001B[0m\n\n", "\u001B[1m \u001B[36m_________________________________________________________\u001B[0m \n\n \u001B[1m                   CASA INFO \u001B[0m\n\n", (Fornecedores) null);
      // Undeclared exception!
      try { 
        casa0.setDivisonOff("\u001B[1m \u001B[36m_________________________________________________________\u001B[0m \n\n \u001B[1m                   CASA INFO \u001B[0m\n\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Casa casa0 = new Casa();
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      hashMap0.put("%.[Zf.BS6wll2(+3", (SmartDevice) null);
      // Undeclared exception!
      try { 
        casa0.setDevices(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 100, "-W3(B", "-W3(B");
      hashMap0.put((String) null, smartSpeaker0);
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecJomar fornecJomar0 = new FornecJomar((String) null);
      Casa casa0 = new Casa(hashMap0, hashMap1, (String) null, "", fornecJomar0);
      // Undeclared exception!
      try { 
        casa0.setDeviceOn("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Casa casa0 = new Casa();
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      SmartBulb smartBulb0 = new SmartBulb();
      hashMap0.put((String) null, smartBulb0);
      casa0.setDevices(hashMap0);
      // Undeclared exception!
      try { 
        casa0.setDeviceOff((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar(4169.449);
      Casa casa0 = new Casa();
      Map<String, SmartDevice> map0 = casa0.getDevices();
      Casa casa1 = new Casa(map0, (Map<String, HashSet<String>>) null, "***** Volume de fatura\u00E7\u00E3o inv\u00E1lido *****", "Fk'4b7", fornecJomar0);
      // Undeclared exception!
      try { 
        casa1.roomisEmpty("sP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      Casa casa0 = new Casa(hashMap0, (Map<String, HashSet<String>>) null, "_________________________________________________________\n           MENU ESTADO\n\n 1) Carregar ficheiro Original.\n 2) Carregar novo Ficheiro.\n 3) Salvar Estado.\n 0) Voltar atr\u00E1s.\n_________________________________________________________\n\nSelecione a op\u00E7\u00E3o pretendida:\n", "_________________________________________________________\n           MENU ESTADO\n\n 1) Carregar ficheiro Original.\n 2) Carregar novo Ficheiro.\n 3) Salvar Estado.\n 0) Voltar atr\u00E1s.\n_________________________________________________________\n\nSelecione a op\u00E7\u00E3o pretendida:\n", (Fornecedores) null);
      // Undeclared exception!
      try { 
        casa0.roomHasDevice("Casa", "y46");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Casa.onlyDigits("", 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Casa.onlyDigits((String) null, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("5L\"dQn[573][la", "formula2", fornecEndesa0);
      Map<String, SmartDevice> map0 = casa0.getDevices();
      Casa casa1 = new Casa(map0, (Map<String, HashSet<String>>) null, "b*\"2Tj60lJ1", "6dGjvWM8CV@", fornecEndesa0);
      // Undeclared exception!
      try { 
        casa1.hasRoom((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      Casa casa0 = new Casa();
      Map<String, HashSet<String>> map0 = casa0.getDivisoes();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 2142543384, "Id: ", "\u001B[1mNIF: \u001B[0m");
      hashMap0.put("\u001B[1mNIF: \u001B[0m", smartSpeaker0);
      FornecEndesa fornecEndesa0 = new FornecEndesa((String) null);
      Casa casa1 = new Casa(hashMap0, map0, (String) null, (String) null, fornecEndesa0);
      // Undeclared exception!
      try { 
        casa1.hasDevice((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP();
      Casa casa0 = new Casa("\nF\u00F3rmula= ", "MilO=", fornecEDP0);
      Map<String, SmartDevice> map0 = casa0.getDevices();
      HashMap<String, HashSet<String>> hashMap0 = new HashMap<String, HashSet<String>>();
      hashMap0.put("MilO=", (HashSet<String>) null);
      Casa casa1 = new Casa(map0, hashMap0, "MilO=", "MilO=", fornecEDP0);
      // Undeclared exception!
      try { 
        casa1.getDivisoes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecEDP fornecEDP0 = new FornecEDP((-1.0));
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("m(*e `SuW-", true, (-1451), "c*_+i)7lTr", (String) null);
      hashMap0.put("_V7%e:qb", smartSpeaker0);
      Casa casa0 = new Casa(hashMap0, hashMap1, "\n\u001B[36m Casa { \u001B[0m \n\n", "\n\u001B[36m Casa { \u001B[0m \n\n", fornecEDP0);
      // Undeclared exception!
      try { 
        casa0.consumoTotal2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar(667.967893827);
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      Casa casa0 = new Casa(hashMap0, (Map<String, HashSet<String>>) null, "a-/Xnu", "Consumo Di\u00E1rio-> ", fornecJomar0);
      // Undeclared exception!
      try { 
        casa0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("formula2", "formula2", fornecEndesa0);
      Map<String, SmartDevice> map0 = casa0.getDevices();
      HashMap<String, HashSet<String>> hashMap0 = new HashMap<String, HashSet<String>>();
      Casa casa1 = new Casa(map0, hashMap0, "formula2", (String) null, fornecEndesa0);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashMap0.put((String) null, hashSet0);
      // Undeclared exception!
      try { 
        casa1.addToRoom("g_-", "\u001B[1mCusto Instala\u00E7\u00E3o: \u001B[0m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Casa casa0 = new Casa();
      // Undeclared exception!
      try { 
        casa0.addSmartDevice((SmartDevice) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar(0.0);
      Casa casa0 = new Casa("\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n \u001B[1m           FORNECEDORES \u001B[0m\n\n \u001B[1m 1) \u001B[0m Info fornecedores.\n \u001B[1m 2) \u001B[0m Modificar f\u00F3rmula.\n \u001B[1m 3) \u001B[0m F\u00F3rmulas.\n \u001B[1m 0) \u001B[0m Voltar atr\u00E1s.\n\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n Selecione a op\u00E7\u00E3o pretendida:\n", "\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n \u001B[1m           FORNECEDORES \u001B[0m\n\n \u001B[1m 1) \u001B[0m Info fornecedores.\n \u001B[1m 2) \u001B[0m Modificar f\u00F3rmula.\n \u001B[1m 3) \u001B[0m F\u00F3rmulas.\n \u001B[1m 0) \u001B[0m Voltar atr\u00E1s.\n\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n Selecione a op\u00E7\u00E3o pretendida:\n", fornecJomar0);
      Map<String, SmartDevice> map0 = casa0.getDevices();
      Casa casa1 = new Casa(map0, (Map<String, HashSet<String>>) null, "\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n \u001B[1m           FORNECEDORES \u001B[0m\n\n \u001B[1m 1) \u001B[0m Info fornecedores.\n \u001B[1m 2) \u001B[0m Modificar f\u00F3rmula.\n \u001B[1m 3) \u001B[0m F\u00F3rmulas.\n \u001B[1m 0) \u001B[0m Voltar atr\u00E1s.\n\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n Selecione a op\u00E7\u00E3o pretendida:\n", "\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n \u001B[1m           FORNECEDORES \u001B[0m\n\n \u001B[1m 1) \u001B[0m Info fornecedores.\n \u001B[1m 2) \u001B[0m Modificar f\u00F3rmula.\n \u001B[1m 3) \u001B[0m F\u00F3rmulas.\n \u001B[1m 0) \u001B[0m Voltar atr\u00E1s.\n\u001B[1m \u001B[36m____________________________________\u001B[0m\n\n Selecione a op\u00E7\u00E3o pretendida:\n", fornecJomar0);
      // Undeclared exception!
      try { 
        casa1.addRoom((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      hashMap0.put("", (SmartDevice) null);
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("\n\u001B[36m } \u001B[0m", (String) null, fornecJomar0);
      Map<String, HashSet<String>> map0 = casa0.getDivisoes();
      Casa casa1 = null;
      try {
        casa1 = new Casa(hashMap0, map0, "\n\u001B[36m } \u001B[0m", ":30<+@<*P[]&1ge?", fornecJomar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Casa casa0 = null;
      try {
        casa0 = new Casa((Casa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addSmartDevice(smartCamera0);
      SmartDevice smartDevice0 = casa0.getDevice("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertNotNull(smartDevice0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      casa0.hasDevice("formula3");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("\n\n");
      casa0.roomisEmpty("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Casa casa0 = new Casa();
      boolean boolean0 = casa0.hasRoom("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("Fk'4b7", true, (-1151.42557), (-1151.42557));
      casa0.addSmartDevice(smartCamera0);
      casa0.setDeviceOff("Fk'4b7");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecJomar fornecJomar0 = new FornecJomar((String) null);
      SmartBulb smartBulb0 = new SmartBulb();
      hashMap0.put("", smartBulb0);
      Casa casa0 = new Casa(hashMap0, hashMap1, (String) null, "", fornecJomar0);
      casa0.setDeviceOn("");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa(",MV", ";M*3", fornecEndesa0);
      LinkedList<Faturas> linkedList0 = new LinkedList<Faturas>();
      Faturas faturas0 = new Faturas();
      linkedList0.add(faturas0);
      casa0.setFatura(linkedList0);
      List<Faturas> list0 = casa0.getFatura();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(",MV", casa0.getProprietario());
      assertTrue(list0.contains(faturas0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      casa0.getFatura();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartBulb smartBulb0 = new SmartBulb("z;OKac7", true, (-1978), 1.0);
      casa0.addSmartDevice(smartBulb0);
      Map<String, SmartDevice> map0 = casa0.getDevices();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setFornecedor((Fornecedores) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Casa casa0 = new Casa();
      FornecEndesa fornecEndesa0 = new FornecEndesa((-1.0));
      casa0.setFornecedor(fornecEndesa0);
      casa0.getFornecedor();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.getFornecedor();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setNIF("b)(@hs[Il95w(_+?cT");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals("", casa0.getNIF());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setNIF("");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.getProprietario();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      String string0 = casa0.getNIF();
      assertNotNull(string0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      double double0 = casa0.getCustoInstalacao();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = Casa.onlyDigits("8FqW+LFNBzv", 434);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar("Fk'4b7");
      Casa casa0 = new Casa("Fk'4b7", "Fk'4b7", fornecJomar0);
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("Fk'4b7", true, 114, "Fk'4b7", "Fk'4b7");
      casa0.addSmartDevice(smartSpeaker0);
      // Undeclared exception!
      try { 
        casa0.consumoTotal("Fk'4b7");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar((-2531.7414));
      Casa casa0 = new Casa("k2pErR*7>!*.2;hsD~J", "L8S]U-;W7", fornecJomar0);
      SmartBulb smartBulb0 = new SmartBulb((String) null, false, (-2031), 3392.8421385675);
      smartBulb0.setID("Fk'4b7");
      casa0.addSmartDevice(smartBulb0);
      double double0 = casa0.consumoTotal("~Y<t^|SYX[MDH");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals("k2pErR*7>!*.2;hsD~J", casa0.getProprietario());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecEDP fornecEDP0 = new FornecEDP((-1.0));
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("m(*e u'W-", true, 31, "c*_+i)7lTr", (String) null);
      hashMap0.put("\n\u001B[36m Casa { \u001B[0m \n\n", smartSpeaker0);
      Casa casa0 = new Casa(hashMap0, hashMap1, "\n\u001B[36m Casa { \u001B[0m \n\n", "\n\u001B[36m Casa { \u001B[0m \n\n", fornecEDP0);
      // Undeclared exception!
      try { 
        casa0.consumoTotal("formula3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa("formula2");
      Casa casa0 = new Casa("formula2", "formula2", fornecEndesa0);
      double double0 = casa0.consumoTotal("formula2");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Casa casa0 = new Casa();
      double double0 = casa0.consumoTotal("formula1");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addSmartDevice(smartCamera0);
      double double0 = casa0.consumoTotal2();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", true, 323.88, 323.88);
      casa0.addSmartDevice(smartCamera0);
      double double0 = casa0.consumoTotal2();
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(194.328, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", true, 323.88, 323.88);
      casa0.addSmartDevice(smartCamera0);
      casa0.addSmartDevice(smartCamera0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      casa0.addSmartDevice(smartSpeaker0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-800.7));
      Casa casa0 = new Casa("k{p>R?", "k{p>R?", fornecEDP0);
      casa0.getDevice("");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addRoom("\n\n");
      casa0.addSmartDevice(smartCamera0);
      casa0.addToRoom("\n\n", "\n\n");
      casa0.addToRoom("\n\n", "\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      casa0.addRoom("");
      casa0.addToRoom("", "Endesa");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("Consumo Di\u00E1rio-> ");
      casa0.addToRoom("\u001B[1m \u001B[36m_________________________________________________________\u001B[0m \n\n \u001B[1m      `            CASA INFO \u001B[0m\n\n", "\u001B[1m \u001B[36m_________________________________________________________\u001B[0m \n\n \u001B[1m      `            CASA INFO \u001B[0m\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-800.7));
      Casa casa0 = new Casa("k{p>R?", "k{p>R?", fornecEDP0);
      casa0.addToRoom("", "SmartCamera");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      casa0.addRoom((String) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("\n\n");
      casa0.addRoom("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("");
      boolean boolean0 = casa0.roomHasDevice("b)(@hs[Il95w(_+?cT", (String) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-800.7));
      Casa casa0 = new Casa("k{p>R?", "k{p>R?", fornecEDP0);
      boolean boolean0 = casa0.roomHasDevice("k{p>R?", "SmartCamera");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("");
      boolean boolean0 = casa0.roomisEmpty("b)(@hs[Il95w(_+?cT");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa("\nFatura\u00E7\u00E3o=");
      Casa casa0 = new Casa("jWD]1^P&5", "formula1", fornecEndesa0);
      boolean boolean0 = casa0.roomisEmpty("\n\u001B[36m Casa { \u001B[0m \n\n\u001B[1mProprietario: \u001B[0mjWD]1^P&5\n\u001B[1mNIF: \u001B[0mnull\n\u001B[1mFornecedor: \u001B[0mEndesa\n\u001B[1mFormula: \u001B[0m\nFatura\u00E7\u00E3o=\n\u001B[1mVolume: \u001B[0m0.0\n\u001B[1mCusto Instala\u00E7\u00E3o: \u001B[0m0.0\n\n\u001B[36m } \u001B[0m");
      assertTrue(boolean0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals("jWD]1^P&5", casa0.getProprietario());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("\u001B[1m Consumo: \u001B[0m", "\u001B[1m Consumo: \u001B[0m", fornecEndesa0);
      casa0.setDivisonOff("");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.addRoom("F6XQsb5} ~s(UR~$0~");
      casa0.setDivisonOn("F6XQsb5} ~s(UR~$0~");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setDivisonOn("U[P(vV'lHjDY;I");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addRoom("\n\n");
      casa0.addSmartDevice(smartCamera0);
      casa0.addToRoom("\n\n", "\n\n");
      casa0.setDivisonOff("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("\u001B[1m Consumo: \u001B[0m", "\u001B[1m Consumo: \u001B[0m", fornecEndesa0);
      casa0.setDeviceOff("kZVJ V8gMYSX0trSc");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", false, 323.88, (-836.77681098552));
      casa0.addRoom("\n\n");
      casa0.addSmartDevice(smartCamera0);
      casa0.addToRoom("\n\n", "\n\n");
      casa0.setDivisonOn("\n\n");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa(",MV", ";M*3", fornecEndesa0);
      casa0.setDeviceOn(",MV");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals(",MV", casa0.getProprietario());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Casa casa0 = new Casa();
      Casa casa1 = new Casa(casa0);
      assertTrue(casa1.equals((Object)casa0));
      
      FornecEDP fornecEDP0 = new FornecEDP();
      casa1.setFornecedor(fornecEDP0);
      boolean boolean0 = casa0.equals(casa1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-800.7));
      Casa casa0 = new Casa("k{p>R?", "k{p>R?", fornecEDP0);
      Casa casa1 = new Casa();
      boolean boolean0 = casa0.equals(casa1);
      assertEquals(0.0, casa1.getCustoInstalacao(), 0.01);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      HashMap<String, HashSet<String>> hashMap1 = new HashMap<String, HashSet<String>>();
      FornecEDP fornecEDP0 = new FornecEDP((-1.0));
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("m(*e u'W-", true, (-1451), "c*_+i)7lTr", "m(*e u'W-");
      hashMap0.put("\n\u001B[36m Casa { \u001B[0m \n\n", smartSpeaker0);
      Casa casa0 = new Casa(hashMap0, hashMap1, "\n\u001B[36m Casa { \u001B[0m \n\n", "\n\u001B[36m Casa { \u001B[0m \n\n", fornecEDP0);
      hashMap0.clear();
      Casa casa1 = new Casa(hashMap0, hashMap1, "\n\u001B[36m Casa { \u001B[0m \n\n", "m(*e u'W-", fornecEDP0);
      boolean boolean0 = casa0.equals(casa1);
      assertEquals(0.0, casa1.getCustoInstalacao(), 0.01);
      assertEquals("\n\u001B[36m Casa { \u001B[0m \n\n", casa1.getProprietario());
      assertFalse(boolean0);
      assertEquals("m(*e u'W-", casa1.getNIF());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FornecJomar fornecJomar0 = new FornecJomar("\u001B[1mProprietario: \u001B[0m");
      Casa casa0 = new Casa("0,UV=Y<(s`~IRYYV", "Tamanho-> ", fornecJomar0);
      boolean boolean0 = casa0.equals("Tamanho-> ");
      assertEquals("0,UV=Y<(s`~IRYYV", casa0.getProprietario());
      assertFalse(boolean0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa("\nFatura\u00E7\u00E3o=");
      Casa casa0 = new Casa("jWD]1^P&5", "formula1", fornecEndesa0);
      boolean boolean0 = casa0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals("jWD]1^P&5", casa0.getProprietario());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Casa casa0 = new Casa();
      SmartCamera smartCamera0 = new SmartCamera("\n\n", true, 323.88, 323.88);
      casa0.addSmartDevice(smartCamera0);
      casa0.addRoom("\n\n");
      casa0.addToRoom("\n\n", "\n\n");
      // Undeclared exception!
      try { 
        casa0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa("\nFatura\u00E7\u00E3o=");
      Casa casa0 = new Casa("jWD]1^P&5", "formula1", fornecEndesa0);
      String string0 = casa0.toString();
      assertEquals("\n\u001B[36m Casa { \u001B[0m \n\n\u001B[1mProprietario: \u001B[0mjWD]1^P&5\n\u001B[1mNIF: \u001B[0mnull\n\u001B[1mFornecedor: \u001B[0mEndesa\n\u001B[1mFormula: \u001B[0m\nFatura\u00E7\u00E3o=\n\u001B[1mVolume: \u001B[0m0.0\n\u001B[1mCusto Instala\u00E7\u00E3o: \u001B[0m0.0\n\n\u001B[36m } \u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FornecEDP fornecEDP0 = new FornecEDP((-800.7));
      Casa casa0 = new Casa("k{p>R?", "k{p>R?", fornecEDP0);
      casa0.setCustoInstalacao((-836.77681098552));
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setFatura((List<Faturas>) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setDevices((Map<String, SmartDevice>) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setDivisoes((Map<String, HashSet<String>>) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Casa casa0 = new Casa("", "", (Fornecedores) null);
      casa0.addRoom("");
      casa0.setDivisonOff("");
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("", "", fornecEndesa0);
      HashMap<String, HashSet<String>> hashMap0 = new HashMap<String, HashSet<String>>();
      hashMap0.put("SmartDevice{\n", (HashSet<String>) null);
      // Undeclared exception!
      try { 
        casa0.setDivisoes(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("formula2", "formula2", fornecEndesa0);
      casa0.setNIF((String) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Casa casa0 = new Casa();
      casa0.setProprietario((String) null);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      Casa casa0 = new Casa();
      Map<String, HashSet<String>> map0 = casa0.getDivisoes();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 2142543384, "Id: ", "\u001B[1mNIF: \u001B[0m");
      hashMap0.put("\u001B[1mNIF: \u001B[0m", smartSpeaker0);
      FornecEndesa fornecEndesa0 = new FornecEndesa((String) null);
      Casa casa1 = new Casa(hashMap0, map0, (String) null, (String) null, fornecEndesa0);
      // Undeclared exception!
      try { 
        casa1.getDevice(":32");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Casa casa0 = new Casa("\u001B[1m Consumo: \u001B[0m", "\u001B[1m Consumo: \u001B[0m", fornecEndesa0);
      Map<String, SmartDevice> map0 = casa0.getDevices();
      Map<String, HashSet<String>> map1 = casa0.getDivisoes();
      FornecEDP fornecEDP0 = new FornecEDP("\u001B[1m Consumo: \u001B[0m");
      Casa casa1 = new Casa(map0, map1, "\u001B[1m Consumo: \u001B[0m", "formula2", fornecEDP0);
      boolean boolean0 = casa0.equals(casa1);
      assertEquals("\u001B[1m Consumo: \u001B[0m", casa1.getProprietario());
      assertEquals(0.0, casa1.getCustoInstalacao(), 0.01);
      assertEquals(0.0, casa0.getCustoInstalacao(), 0.01);
      assertEquals("formula2", casa1.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Casa casa0 = new Casa();
      Casa casa1 = new Casa(casa0);
      assertTrue(casa1.equals((Object)casa0));
      
      HashMap<String, HashSet<String>> hashMap0 = new HashMap<String, HashSet<String>>();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashMap0.put((String) null, hashSet0);
      casa1.setDivisoes(hashMap0);
      boolean boolean0 = casa1.equals(casa0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Casa casa0 = new Casa();
      Casa casa1 = new Casa();
      boolean boolean0 = casa0.equals(casa1);
      assertTrue(boolean0);
      assertEquals(0.0, casa1.getCustoInstalacao(), 0.01);
  }
}
