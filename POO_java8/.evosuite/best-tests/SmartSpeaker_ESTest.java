/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:21:05 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartSpeaker_ESTest extends SmartSpeaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(":iXktIQwug-T", true, 2, ":iXktIQwug-T", ":iXktIQwug-T");
      smartSpeaker0.volumeDown();
      assertEquals(1, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("Volume-> ", true, (-225), "Volume-> ", "Volume-> ");
      assertEquals(0, smartSpeaker0.getVolume());
      
      smartSpeaker0.setVolume((-225));
      smartSpeaker0.volumeDown();
      assertEquals((-214.0), smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setVolume(491);
      smartSpeaker0.volumeUp();
      assertEquals(491, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      smartSpeaker1.setVolume(491);
      boolean boolean0 = smartSpeaker1.equals(smartSpeaker0);
      assertEquals(491, smartSpeaker1.getVolume());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", false, 291, "", (String) null);
      assertEquals(100, smartSpeaker0.getVolume());
      
      smartSpeaker0.setVolume(291);
      assertEquals(291, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("`/QDI", true, 0, "Marca-> ", "`/QDI");
      int int0 = smartSpeaker0.getVolume();
      assertEquals(7.0, smartSpeaker0.consumoEnergia(), 0.01);
      assertEquals("Marca-> ", smartSpeaker0.getChannel());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setVolume((-731));
      int int0 = smartSpeaker0.getVolume();
      assertEquals((-729.0), smartSpeaker0.consumoEnergia(), 0.01);
      assertEquals((-731), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setMarca("G$De&_mYq#?E<T:&5");
      smartSpeaker0.getMarca();
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("bdgN*YtBLp&?_", false, (-388), "", "");
      smartSpeaker0.getMarca();
      assertEquals("", smartSpeaker0.getChannel());
      assertEquals(0.0, smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("Is'Z=~7", true, (-417), "Is'Z=~7", "Is'Z=~7");
      smartSpeaker0.getChannel();
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, (-1), "", "");
      smartSpeaker0.getChannel();
      assertEquals(0.0, smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setVolume((-1315));
      double double0 = smartSpeaker0.consumoEnergia();
      assertEquals((-1315), smartSpeaker0.getVolume());
      assertEquals((-1313.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      SmartSpeaker smartSpeaker1 = smartSpeaker0.clone();
      assertEquals(0, smartSpeaker1.getVolume());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("Volume-> ", true, (-225), "Volume-> ", "Volume-> ");
      assertEquals(0, smartSpeaker0.getVolume());
      
      smartSpeaker0.setVolume((-225));
      smartSpeaker0.clone();
      assertEquals((-225), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, (-1549), "", "");
      smartSpeaker0.setMarca((String) null);
      // Undeclared exception!
      try { 
        smartSpeaker0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n SmarSpeaker (\u001B[36m\n SmarSpeaker (\u001B[36m\u001B[0m,OF): Marca-> \n SmarSpeaker (\u001B[36m  Channel->   \u001B[1m  Volume-> 0  Consumo Di\u00E1rio-> 22.0", true, (-1840700267), (String) null, "]H7-yDnJ6D`V!KX,ee");
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      // Undeclared exception!
      try { 
        smartSpeaker0.equals(smartSpeaker1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = null;
      try {
        smartSpeaker0 = new SmartSpeaker((SmartSpeaker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, (-222), "", "\n SmarSpeaker (\u001B[36m");
      double double0 = smartSpeaker0.consumoEnergia();
      assertEquals(22.0, double0, 0.01);
      assertEquals("", smartSpeaker0.getChannel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 1154, (String) null, (String) null);
      // Undeclared exception!
      try { 
        smartSpeaker0.consumoEnergia();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, (-1549), "", "");
      double double0 = smartSpeaker0.consumoEnergia();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 1154, (String) null, (String) null);
      smartSpeaker0.getChannel();
      assertEquals(100, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 1154, (String) null, (String) null);
      smartSpeaker0.getMarca();
      assertEquals(100, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, 1154, (String) null, (String) null);
      int int0 = smartSpeaker0.getVolume();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.volumeDown();
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.volumeUp();
      assertEquals(3.0, smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("/,p(<2#{=f", true, 4679, "/,p(<2#{=f", "OD");
      smartSpeaker0.volumeUp();
      assertEquals("/,p(<2#{=f", smartSpeaker0.getChannel());
      assertEquals(104.0, smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("<;", true, 630, "<;", "<;");
      String string0 = smartSpeaker0.toString();
      assertEquals("\n SmarSpeaker (\u001B[36m<;\u001B[0m,ON): Marca-> <;  Channel-> <;  Volume-> 100  Consumo Di\u00E1rio-> 104.0", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      SmartSpeaker smartSpeaker1 = new SmartSpeaker();
      assertTrue(smartSpeaker1.equals((Object)smartSpeaker0));
      
      smartSpeaker0.setChannel("U");
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      SmartSpeaker smartSpeaker1 = new SmartSpeaker();
      smartSpeaker0.setVolume(639);
      boolean boolean0 = smartSpeaker1.equals(smartSpeaker0);
      assertEquals(641.0, smartSpeaker0.consumoEnergia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("<;", true, 630, "<;", "<;");
      SmartSpeaker smartSpeaker1 = new SmartSpeaker("<;", false, 100, "<;", "<;");
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertEquals(104.0, smartSpeaker1.consumoEnergia(), 0.01);
      assertEquals(100, smartSpeaker0.getVolume());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("<;", true, 630, "<;", "<;");
      SmartSpeaker smartSpeaker1 = new SmartSpeaker("<;", true, 100, "<;", "<;");
      boolean boolean0 = smartSpeaker1.equals(smartSpeaker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n SmarSpeaker (\u001B[36m\n SmarSpeaker (\u001B[36m\u001B[0m,OF): Marca-> \n SmarSpeaker (\u001B[36m  Channel->   \u001B[1m  Volume-> 0  Consumo Di\u00E1rio-> 22.0", true, (-1840700267), (String) null, "]H7-yDnJ6D`V!KX,ee");
      boolean boolean0 = smartSpeaker0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(20.0, smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("<;", true, 630, "<;", "<;");
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker0);
      assertTrue(boolean0);
      assertEquals(100, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, (-1549), "", "");
      Object object0 = new Object();
      boolean boolean0 = smartSpeaker0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, smartSpeaker0.consumoEnergia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("bdN*YtBL%p_", false, (-356), "bdN*YtBL%p_", "bdN*YtBL%p_");
      String string0 = smartSpeaker0.toString();
      assertEquals("\n SmarSpeaker (\u001B[36mbdN*YtBL%p_\u001B[0m,OF): Marca-> bdN*YtBL%p_  Channel-> bdN*YtBL%p_  Volume-> 0  Consumo Di\u00E1rio-> 13.0", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setVolume(639);
      smartSpeaker0.setVolume(100);
      assertEquals(639, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("/,p(<2#{=f", true, 4679, "/,p(<2#{=f", "OD");
      SmartSpeaker smartSpeaker1 = smartSpeaker0.clone();
      assertEquals("OD", smartSpeaker1.getMarca());
      
      smartSpeaker1.setMarca("OF");
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, (-1549), "", "");
      smartSpeaker0.hashCode();
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      smartSpeaker0.setVolume((-5308));
      smartSpeaker0.setVolume(100);
      assertEquals((-5308), smartSpeaker0.getVolume());
  }
}
