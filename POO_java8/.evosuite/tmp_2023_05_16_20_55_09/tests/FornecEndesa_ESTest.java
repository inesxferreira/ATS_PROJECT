/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:34:29 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FornecEndesa_ESTest extends FornecEndesa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa(2297.80649728555);
      Fornecedores fornecedores0 = fornecEndesa0.clone();
      assertEquals("", fornecedores0.getFormula());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa(2297.80649728555);
      FornecEndesa fornecEndesa1 = new FornecEndesa(fornecEndesa0);
      assertEquals(0.6, fornecEndesa1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa("[m");
      assertEquals("[m", fornecEndesa0.getFormula());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa();
      Fornecedores fornecedores0 = fornecEndesa0.clone();
      assertEquals(0.148, fornecedores0.getValorBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FornecEndesa fornecEndesa0 = null;
      try {
        fornecEndesa0 = new FornecEndesa((FornecEndesa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Fornecedores", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FornecEndesa fornecEndesa0 = new FornecEndesa((-1.0));
      Fornecedores fornecedores0 = fornecEndesa0.clone();
      assertNotSame(fornecedores0, fornecEndesa0);
  }
}
