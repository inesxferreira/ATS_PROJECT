/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 20:12:50 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Estado_ESTest extends Estado_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Estado estado0 = new Estado();
      FornecEDP fornecEDP0 = new FornecEDP("bF>H$h=e?");
      estado0.addForn(fornecEDP0);
      estado0.updateFornecedor(fornecEDP0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDC{RAPm4", "Q[uzVD)CDC{RAPm4", fornecJomar0);
      linkedList0.add(casa0);
      LinkedList<Fornecedores> linkedList1 = new LinkedList<Fornecedores>();
      Estado estado0 = new Estado(linkedList0, linkedList1);
      estado0.updateCasa(casa0, 0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDC{RAPm4", "Q[uzVD)CDC{RAPm4", fornecJomar0);
      linkedList0.add(casa0);
      estado0.ordenaListGasto(linkedList0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDOC{RAPm4", "Q[uzVD)CDOC{RAPm4", fornecJomar0);
      linkedList0.add(casa0);
      casa0.setCustoInstalacao(870.282);
      estado0.ordenaListGasto(linkedList0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Estado estado0 = new Estado();
      LinkedList<Fornecedores> linkedList0 = new LinkedList<Fornecedores>();
      FornecEndesa fornecEndesa0 = new FornecEndesa(".-}You:k<");
      linkedList0.add((Fornecedores) fornecEndesa0);
      estado0.ordenaListFornecedores(linkedList0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      LinkedList<Fornecedores> linkedList1 = new LinkedList<Fornecedores>();
      Estado estado0 = new Estado(linkedList0, linkedList1);
      FornecEDP fornecEDP0 = new FornecEDP(0.3);
      linkedList1.add((Fornecedores) fornecEDP0);
      estado0.ordenaListFornecedores(linkedList1);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Estado estado0 = new Estado();
      LinkedList<Fornecedores> linkedList0 = new LinkedList<Fornecedores>();
      FornecEDP fornecEDP0 = new FornecEDP((-514.337166569749));
      linkedList0.add((Fornecedores) fornecEDP0);
      estado0.ordenaListFornecedores(linkedList0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Estado.isDateValid("01/01/2018");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar(1245.26);
      Casa casa0 = new Casa();
      estado0.addCasa(casa0);
      // Undeclared exception!
      try { 
        estado0.updateCasas(fornecJomar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDC{RAPm4", "Q[uzVD)CDC{RAPm4", fornecJomar0);
      linkedList0.add(casa0);
      List<Fornecedores> list0 = estado0.getFornecedores();
      Estado estado1 = new Estado(linkedList0, list0);
      // Undeclared exception!
      try { 
        estado1.updateCasa((Casa) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.updateCasa((Casa) null, (-987));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.setData((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      LinkedList<Fornecedores> linkedList1 = new LinkedList<Fornecedores>();
      Estado estado0 = new Estado(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        estado0.saveEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Estado estado0 = new Estado();
      try { 
        estado0.saveEstado("+");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Estado estado0 = new Estado();
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      // Undeclared exception!
      try { 
        estado0.ordenaListGasto(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDOC{RAPm4", "Q[uzVD)CDOC{RAPm4", fornecJomar0);
      linkedList0.add(casa0);
      linkedList0.add(casa0);
      // Undeclared exception!
      try { 
        estado0.ordenaListGasto(linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.ordenaListFornecedores((List<Fornecedores>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Estado estado0 = new Estado();
      LinkedList<Fornecedores> linkedList0 = new LinkedList<Fornecedores>();
      // Undeclared exception!
      try { 
        estado0.ordenaListFornecedores(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Estado.ordenaListConsumo((List<Casa>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.loadEstadoObj((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Estado estado0 = new Estado();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!Y3<^yqV&LSck");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        estado0.loadEstadoObj("!Y3<^yqV&LSck");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Estado estado0 = new Estado();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("01/01/2018");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        estado0.loadEstadoObj("01/01/2018");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Estado estado0 = new Estado();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!Y3<^yqV&LSck");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      try { 
        estado0.loadEstadoObj("!Y3<^yqV&LSck");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.loadEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Estado.lerFicheiro((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Estado.isDateValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.addForn((Fornecedores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.addCasa((Casa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Fornecedores> linkedList0 = new LinkedList<Fornecedores>();
      Estado estado0 = null;
      try {
        estado0 = new Estado((List<Casa>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Estado estado0 = null;
      try {
        estado0 = new Estado((Estado) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Estado estado0 = new Estado();
      FornecEDP fornecEDP0 = new FornecEDP("+");
      estado0.addForn(fornecEDP0);
      estado0.getFornecedores();
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<String> list0 = Estado.lerFicheiro("bF>H$h=e?");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Estado estado0 = new Estado();
      String string0 = estado0.getData();
      assertEquals("01/01/2018", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar("");
      estado0.updateCasas(fornecJomar0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Estado estado0 = new Estado();
      estado0.updateCasas((Fornecedores) null);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Estado estado0 = new Estado();
      List<Casa> list0 = estado0.getCasas();
      LinkedList<Fornecedores> linkedList0 = new LinkedList<Fornecedores>();
      FornecEndesa fornecEndesa0 = new FornecEndesa(".-}Yo^:k<");
      linkedList0.add((Fornecedores) fornecEndesa0);
      Estado estado1 = new Estado(list0, linkedList0);
      boolean boolean0 = estado1.equals(estado0);
      assertFalse(boolean0);
      assertEquals("01/01/2018", estado0.getData());
      assertEquals("01/01/2018", estado1.getData());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Estado estado0 = new Estado();
      Estado estado1 = new Estado(estado0);
      assertTrue(estado1.equals((Object)estado0));
      
      Casa casa0 = new Casa();
      estado1.addCasa(casa0);
      boolean boolean0 = estado1.equals(estado0);
      assertFalse(estado1.equals((Object)estado0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Estado estado0 = new Estado();
      List<Casa> list0 = estado0.getCasas();
      LinkedList<Fornecedores> linkedList0 = new LinkedList<Fornecedores>();
      Estado estado1 = new Estado(list0, linkedList0);
      boolean boolean0 = estado1.equals(estado0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Estado estado0 = new Estado();
      boolean boolean0 = estado0.equals((Object) null);
      assertEquals("01/01/2018", estado0.getData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Estado estado0 = new Estado();
      boolean boolean0 = estado0.equals(estado0);
      assertEquals("01/01/2018", estado0.getData());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Estado estado0 = new Estado();
      List<Fornecedores> list0 = estado0.getFornecedores();
      boolean boolean0 = estado0.equals(list0);
      assertFalse(boolean0);
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Estado estado0 = new Estado();
      estado0.setData("01/01/2018");
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Estado estado0 = new Estado();
      estado0.setData("");
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDC{RAPm4", "Q[uzVD)CDC{RAPm4", fornecJomar0);
      linkedList0.add(casa0);
      LinkedList<Fornecedores> linkedList1 = new LinkedList<Fornecedores>();
      Estado estado0 = new Estado(linkedList0, linkedList1);
      List<Casa> list0 = estado0.getCasas();
      assertEquals("01/01/2018", estado0.getData());
      assertTrue(list0.contains(casa0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      Estado estado0 = new Estado();
      Casa casa0 = new Casa();
      linkedList0.add(casa0);
      List<Fornecedores> list0 = estado0.getFornecedores();
      Estado estado1 = new Estado(linkedList0, list0);
      // Undeclared exception!
      try { 
        estado1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Casa", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Estado estado0 = new Estado();
      estado0.loadEstado("01/01/2018");
      assertEquals("01/01/2018", estado0.getData());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Estado estado0 = new Estado();
      try { 
        estado0.loadEstadoObj("\u001B[1m \u001B[36m_________________________________________________________\u001B[0m\n\n \u001B[1m                   SIMULACAO \u001B[0m\n\n \u001B[1m 1) \u001B[0m Emiss\u00E3o faturas.\n \u001B[1m 2) \u001B[0m Faturas.\n \u001B[1m 3) \u001B[0m Estat\u00EDsticas.\n \u001B[1m 0) \u001B[0m Voltar atr\u00E1s.\n \u001B[1m \u001B[36m_________________________________________________________\u001B[0m\n\n Selecione a op\u00E7\u00E3o pretendida:\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar();
      // Undeclared exception!
      try { 
        estado0.updateFornecedor(fornecJomar0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Estado estado0 = new Estado();
      FornecJomar fornecJomar0 = new FornecJomar();
      Casa casa0 = new Casa("Q[uzVD)CDOC{RAPm4", "Q[uzVD)CDOC{RAPm4", fornecJomar0);
      // Undeclared exception!
      try { 
        estado0.updateCasa(casa0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Estado estado0 = new Estado();
      try { 
        estado0.saveEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Estado estado0 = new Estado();
      String string0 = estado0.toString();
      assertEquals("Estado [][]01/01/2018", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Estado estado0 = new Estado();
      List<Fornecedores> list0 = estado0.getFornecedores();
      // Undeclared exception!
      try { 
        estado0.ordenaListFornecedores(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Estado estado0 = new Estado();
      // Undeclared exception!
      try { 
        estado0.ordenaListGasto((List<Casa>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Estado", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Casa> linkedList0 = new LinkedList<Casa>();
      Estado.ordenaListConsumo(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Estado estado0 = new Estado();
      Estado estado1 = estado0.clone();
      assertTrue(estado1.equals((Object)estado0));
      assertEquals("01/01/2018", estado1.getData());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = Estado.isDateValid("");
      assertFalse(boolean0);
  }
}
